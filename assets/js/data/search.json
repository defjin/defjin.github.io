[ { "title": "도커로 지킬 블로그 구축하기 (3)", "url": "/posts/%EB%8F%84%EC%BB%A4%EB%A1%9C-%EC%A7%80%ED%82%AC-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B03/", "categories": "Docker, Jekyll", "tags": "Jekyll, Docker, Blog", "date": "2021-12-08 21:00:00 +0900", "snippet": "test" }, { "title": "도커로 지킬 블로그 구축하기 (2)", "url": "/posts/%EB%8F%84%EC%BB%A4%EB%A1%9C-%EC%A7%80%ED%82%AC-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B02/", "categories": "Docker, Jekyll", "tags": "Jekyll, Docker, Blog", "date": "2021-12-08 21:00:00 +0900", "snippet": "인터넷 상에 몇몇 블로그 검색할 수 있는 방식으로 도커 컨테이너를 띄워서 지킬을 개발하려고 보면 상당히 불편한 부분이 있다.매번 플러그인, gem 등을 다운받고 설치하는 과정을 거치기 때문에 hot reloading 에 익숙할 경우 굉장히 답답한 느낌을 받을 수 밖에 없다. (컴퓨터가 매우 빠르다면 큰 상관은 없을 것이다.)아래 그림과 같이 매번 fetching, using, bundling 이 컨테이너를 띄울 때마다 반복된다. 그리고 변경사항이 있을 때마다 컨테이너를 재시작하지 않으면, 변경사항이 적용되지 않으므로 무조건 컨테이너를 재시작을 해줘야한다.따라서 한 번 받은 플러그인, gem 은 다시 받지 않도록 도커 volume 기능을 이용해서 보관해두는 것이 좋다.또한, 몇 가지 옵션을 적용해서 관리하기 편하게 해두는 것이 나중에 여러 개의 컨테이너로 개발을 할 때 큰 문제가 생기지 않을 것이다.그러므로 컨테이너에 사용시에 다음 설정들을 추가해주자. 이 중에 몇 가지는 이미 최초에 설정할 때 적용된 것들도 있다. 그리고 윈도우에서 도커 데스크탑이 충분히 좋아졌기는 하지만 설정이 애매하게 먹는 경우들이 있는 것 같다.특히 핫 리로딩의 경우 잘 적용되지 않아서 가능하다 싶은 옵션들을 다 넣어둔 것이라서 각자 빼고 넣으면서 테스트해보면 더 좋은 옵션을 찾을 수 있을 것이다.(리눅스에서는 원래 저 기능이 동작한다고 하는데, 확인해보지는 않았다.) 컨테이너 종료시 컨테이너 자동 삭제 (–rm) 이미 다운 받은 bundle 이나 gem을 재 다운로드 하지 않는 (-v) 컨테이너 이름 설정 (–name) bash command 실행 (-it) background 실행 (-d) hot reloading (–livereload –trace –force-polling) 최초 도커 컨테이너 설정 docker run -it --rm -v ${PWD}:/srv/jekyll -p 4000:4000 jekyll/jekyll jekyll serve 변경된 도커 컨테이너 설정 docker run -itd --rm --name blog -p 4000:4000 -v ${PWD}:/srv/jekyll -v ${PWD}\\.cache\\bundle:/usr/local/bundle -v ${PWD}\\.cache\\gem:/usr/gem jekyll/jekyll:latest jekyll serve --livereload --trace --force-polling 이렇게 변경하더라도 최초 한 번은 다운로드 과정을 거친 다는 점을 기억해두자. 특히 livereload, trace, force-polling 등을 넣게되면 더 많은 플러그인을 설치하기 때문에 시간이 엄청 걸린다.2번째로 실행할 때부터 의미 있는 시간 단축을 확인할 수 있다.실제로 docker desktop 로그에 찍히는 시간보다 훨씬 많은 시간이 단축된다.물론 custom hot reloading 기능을 사용하지 않겠다고 하면, 맨 마지막 줄은 제거하고 사용하면 된다. hot reloading 기능을 저렇게해서 썼을 때는 caching에 문제가 좀 있을 수 있다.변경하고 나면 처음 그림과 다르게, 바로 ruby가 실행되면서 화면 파일을 생성하게 된다.또한 hot reloading 기능을 켜서 실행시켜 둔 경우 완전 실시간은 아니지만 한 번씩 파일을 둘러보면서 변경사항이 있는 경우 Auto-Regenerating이 진행된다.그럼 다음 글에서는 Chirpy 템플릿의 간단한 설정 방법을 확인해보자." }, { "title": "도커로 지킬 블로그 구축하기 (1)", "url": "/posts/%EB%8F%84%EC%BB%A4%EB%A1%9C-%EC%A7%80%ED%82%AC-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B01/", "categories": "Docker, Jekyll", "tags": "Jekyll, Docker, Blog", "date": "2021-12-08 21:00:00 +0900", "snippet": "Why Docker?처음 깃헙 블로그를 구축할 때에는 잘 모르는 ruby 설정을 다른 블로그를 열심히 따라하면서 설치하고, 설정을 하는 과정을 거쳐서 힘들게 올렸었다. 동시에 든 생각은 내가 지킬 블로그를 구성하더라도 현재로써는 루비를 사용하지 않고, liquid 라는 것을 사용하지도 않는데 복잡하게 저 구성들을 다 따라가야하는가? 라는 생각과 잘 사용하지도 않을 개발환경을 굳이 내 컴퓨터에 깔아야하는가? 라는 생각이 들었다.최근에 도커를 배우면서 지킬 블로그도 도커로 변경할 수 있지 않을까? 라는 생각이 들어서 찾아보았고 그 방식대로 지킬 블로그를 구성할 수 있었다. 일차적으로 바닥부터 도커 설정을 하고 싶진 않았어서, 기본적인 도커 세팅을 다 해놓은 + 사람들이 많이 사용하면서 적당히 깔끔한 지킬 템플릿들을 찾았고, 그 중에 한 가지로 Chirpy 템플릿을 찾을 수 있었다.기능적인 면에서는 예전에 사용하던 Text-theme 을 따라가기는 어려운데 Text-Theme은 자유도가 너무 높아서 이리저리 만지다 보면 오히려 블로그가 기괴해지는 문제도 좀 있었기에 리프레시 겸해서 Chirpy를 택했다.아주 친절하게도 Chirpy 템플릿(https://github.com/cotes2020/jekyll-theme-chirpy) 의 홈페이지로 들어가보면, 적용하는 법이 간략하면서도 적당히 있을 건 다 있는 형태로 작성되어 있다. Fork 를 하고, 불필요한 템플릿을 삭제한 후 도커에 올려서 로컬에서 적용해볼 수 있다. 그리고 로컬에서 적용한 것을 github repo에 올리기만 하면 끝!아래에 서술되는 모든 과정은 윈도우 + Docker Desktop 이 깔려있는 기준이므로 타 운영체제의 경우 기본적인 설정 방식이 조금 다를 수 있을 것이다. 아래에 간단한 설정 방법을 공유할텐데, 마찬가지로 github.io 를 사용하는 기준이기 때문에 다른 호스팅에 올린다거나 하면 약간 다른 설정을 적용해야한다. ( 이 부분은 원본 github 을 참조하자.)설치방법 https://github.com/cotes2020/jekyll-theme-chirpy 이 주소의 레포에 들어간 후 Fork 를 한다. Fork 를 하게 되면, 아주 손쉽게 내 깃헙에 https://github.com/{username}/jekyll-theme-chirpy 같은 형식으로 Repo가 만들어질 것이다. 해당 Repo의 이름을 {username}.github.io로 변경한다. 이미 기존에 먼저 사용하던 github.io Repo가 있는 경우에는 git clone을 먼저 해두고 다 만든다음에 변경할 수도 있다. git clone 을 통해서 다운 받는다. 그럼 현재 위치에서 {username}.github.io 폴더가 생성된다. {username}.github.io 폴더 안에서 windows terminal , powershell, git bash 등 편하게 사용할 수 있는 터미널을 연다. 혹은 터미널을 연다음에 {username}.github.io 폴더로 이동한다. 이후 bash tools/init.sh 커맨드를 실행한다. 커맨드를 실행하면 다음 일들이 일어난다. (1) Repo 내부에 불필요한 파일들을 삭제해 준다. .travis.yml _posts 폴더 아래의 파일들 docs 폴더 (2) github action workflow 관련된 파일의 확장자 변경 및 삭제가 일어난다. .github 폴더 안에 있는 파일들이 삭제 및 변경된다. (3) .gitignore 파일에서 Gemfile.lock 을 삭제해준다. (4) 새로운 commit을 생성해준다. Docker로 로컬에서 실행하기 위해서는 {username}.github.io 폴더 안에서 다음 docker command 를 실행한다. windows powershell 혹은 windows terminal 을 이용할 경우에는 ${PWD}가 현재 폴더를 나타내고 command line(cmd) 를 이용할 경우에는 %cd% 가 현재 폴더를 나타낸다. docker run -it --rm -v ${PWD}:/srv/jekyll -p 4000:4000 jekyll/jekyll:latest jekyll serve 실행을 하게 되면 localhost:4000 에서 다음 화면을 확인할 수 있다. 여기까지 진행을 했다면, 내 github repo에 푸시하여 실제로 블로그가 생성이 되는지 확인을 해보자. 정상적으로 수정을 했다면 다음 command를 실행하면 github repo에 push가 된다. git add . git commit -m &quot;first blog&quot; git push -u origin master 이후에 자신의 {username}.github.io로 가보자. 그럼 덩그러니 이상한 페이지가 만들어져 있을 것이다. 그럼 웹페이지가 아니라 본인의 {username}.github.io repo로 돌아가보자. repo에 branch를 살펴보면 gh-pages 라는 branch 가 생성되어 있을 것이다. 그럼 살짝 위로 올라가 Settings 탭을 클릭하고 왼쪽 네이게이션 바에서 Pages를 눌러보자. 그럼 Source 라는 제목 아래에 처음에는 master , root 라는 형태로 저장되어 있을 것이다. 이것을 gh-page root로 변경한 후 Save 버튼을 눌러 저장한다. 최종적으로 다음 그림처럼 변경되면 된다. 잠시 기다렸다가 {username}.github.io로 가면 정상적으로 기본 페이지가 만들어져 있는 것을 확인할 수 있다. " } ]
